# This policy ensures that VPC flow logging is enabled for all VPCs
# Resource: awscc_ec2_vpc

import "tfplan/v2" as tfplan
import "strings"

# Get all VPC resources
get_vpcs = func() {
    resources = filter tfplan.resource_changes as _, rc {
        rc.type is "awscc_ec2_vpc" and
        (rc.change.actions contains "create" or rc.change.actions contains "update")
    }
    return resources
}

# Check if flow logging is enabled for the VPC
has_flow_logging = func(vpc_id) {
    flow_logs = filter tfplan.resource_changes as _, rc {
        rc.type is "awscc_ec2_flow_log" and
        (rc.change.actions contains "create" or rc.change.actions contains "update") and
        rc.change.after.resource_id is vpc_id
    }
    return length(flow_logs) > 0
}

# Create detailed report of violating resources
report_non_compliant_vpcs = func() {
    violators = []
    vpcs = get_vpcs()
    
    for vpcs as vpc {
        if vpc.change.after.id is not null and not has_flow_logging(vpc.change.after.id) {
            violator = {
                "address": vpc.address,
                "id": vpc.change.after.id,
                "message": "VPC flow logging is not enabled for this VPC."
            }
            append(violators, violator)
        }
    }
    
    return violators
}

# Print violation details when policy is violated
print_report = func(violations) {
    if length(violations) > 0 {
        print("VPC Flow Logging Policy Violations:")
        print("==================================")
        for violations as violation {
            print("- Resource:", violation.address)
            print("  ID:", violation.id)
            print("  Issue:", violation.message)
            print("")
        }
    }
}

# Check for violations
violations = report_non_compliant_vpcs()
print_report(violations)

# Main rule
vpcs_with_flow_logs = rule {
    length(violations) is 0
}

main = rule {
    vpcs_with_flow_logs
}