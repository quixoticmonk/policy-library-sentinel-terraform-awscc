# This policy ensures AWS EC2 Network ACLs do not allow ingress from 0.0.0.0/0 or ::/0 to ports 22 or 3389
import "tfplan/v2" as tfplan
import "tfconfig/v2" as tfconfig
import "strings"

# Get all Network ACL entries
aws_network_acl_entries = filter tfplan.resource_changes as _, rc {
    rc.type is "awscc_ec2_network_acl_entry" and
    (rc.change.actions contains "create" or rc.change.actions contains "update")
}

# Rule to validate Network ACLs don't allow unrestricted admin port access
validate_network_acl_entries = rule {
    all aws_network_acl_entries as _, entry {
        entry.change.after.egress is true or
        entry.change.after.rule_action is "deny" or
        (
            (entry.change.after.cidr_block is not "0.0.0.0/0" and
             entry.change.after.ipv6_cidr_block is not "::/0") or
            
            (
                entry.change.after.port_range is null or
                (
                    entry.change.after.port_range.from != 22 and
                    entry.change.after.port_range.to != 22 and
                    entry.change.after.port_range.from != 3389 and
                    entry.change.after.port_range.to != 3389 and
                    !(entry.change.after.port_range.from <= 22 and entry.change.after.port_range.to >= 22) and
                    !(entry.change.after.port_range.from <= 3389 and entry.change.after.port_range.to >= 3389)
                )
            )
        )
    }
}

# Reporting function
report_network_acl_entries = func() {
    violations = []
    
    for aws_network_acl_entries as address, entry {
        is_ingress = entry.change.after.egress is false
        is_allow = entry.change.after.rule_action is "allow"
        is_public_cidr = entry.change.after.cidr_block is "0.0.0.0/0" or entry.change.after.ipv6_cidr_block is "::/0"
        
        has_port_range = entry.change.after.port_range is not null
        is_admin_port = false
        
        if has_port_range {
            from_port = entry.change.after.port_range.from
            to_port = entry.change.after.port_range.to
            
            # Check if port range includes SSH (22) or RDP (3389)
            is_admin_port = (
                from_port == 22 or
                to_port == 22 or
                from_port == 3389 or
                to_port == 3389 or
                (from_port <= 22 and to_port >= 22) or
                (from_port <= 3389 and to_port >= 3389)
            )
        }
        
        if is_ingress and is_allow and is_public_cidr and has_port_range and is_admin_port {
            append(violations, address)
        }
    }
    
    return {
        "compliant": length(violations) == 0,
        "violations": violations,
        "message": "Network ACLs should not allow ingress traffic from 0.0.0.0/0 or ::/0 to ports 22 (SSH) or 3389 (RDP)."
    }
}

# Main rule that we'll export
main = rule {
    validate_network_acl_entries
}