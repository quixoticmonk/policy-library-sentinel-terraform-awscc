# This policy ensures security groups don't allow unrestricted access to SSH
# Resource: awscc_ec2_security_group

import "tfplan/v2" as tfplan
import "strings"

# Get all security groups
get_security_groups = func() {
    resources = filter tfplan.resource_changes as _, rc {
        rc.type is "awscc_ec2_security_group" and
        (rc.change.actions contains "create" or rc.change.actions contains "update")
    }
    return resources
}

# Check for unrestricted SSH access
has_unrestricted_ssh = func(sg) {
    if sg.security_group_ingress is null {
        return false
    }
    
    for sg.security_group_ingress as rule {
        # Check for IPv4 unrestricted access
        if rule.cidr_ip is "0.0.0.0/0" {
            if rule.ip_protocol is "-1" {
                return true
            }
            
            if rule.ip_protocol is "tcp" {
                from_port = rule.from_port
                to_port = rule.to_port
                
                if (from_port <= 22 and to_port >= 22) {
                    return true
                }
            }
        }
        
        # Check for IPv6 unrestricted access
        if rule.cidr_ipv6 is "::/0" {
            if rule.ip_protocol is "-1" {
                return true
            }
            
            if rule.ip_protocol is "tcp" {
                from_port = rule.from_port
                to_port = rule.to_port
                
                if (from_port <= 22 and to_port >= 22) {
                    return true
                }
            }
        }
    }
    return false
}

# Create detailed report of violating resources
report_non_compliant_security_groups = func() {
    violators = []
    security_groups = get_security_groups()
    
    for security_groups as sg {
        if has_unrestricted_ssh(sg.change.after) {
            violator = {
                "address": sg.address,
                "group_id": sg.change.after.group_id is not null ? sg.change.after.group_id : "New security group",
                "group_name": sg.change.after.group_name is not null ? sg.change.after.group_name : "Unknown",
                "vpc_id": sg.change.after.vpc_id is not null ? sg.change.after.vpc_id : "Unknown",
                "message": "Security group allows unrestricted access (0.0.0.0/0 or ::/0) to SSH port 22."
            }
            append(violators, violator)
        }
    }
    
    return violators
}

# Print violation details when policy is violated
print_report = func(violations) {
    if length(violations) > 0 {
        print("Security Group SSH Access Policy Violations:")
        print("=========================================")
        for violations as violation {
            print("- Resource:", violation.address)
            print("  Group ID:", violation.group_id)
            print("  Group Name:", violation.group_name)
            print("  VPC ID:", violation.vpc_id)
            print("  Issue:", violation.message)
            print("")
        }
    }
}

# Check for violations
violations = report_non_compliant_security_groups()
print_report(violations)

# Main rule
no_unrestricted_ssh = rule {
    length(violations) is 0
}

main = rule {
    no_unrestricted_ssh
}